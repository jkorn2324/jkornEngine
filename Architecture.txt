TODOS:
-> Build Dependencies [x]

Performance Issues:
-> On Laptop
	-> CreateDeviceAndSwapChain is really slow.
	-> Takes up high CPU Usage.

General Rendering:
-> Per platform rendering
   -> Implementations move on from being relied on enum
      to macros []
   -> OpenGL Implementation []
   -> Vulkan Implementation []

-> Objects are sorted by material when being processed for Rendering []
   -> Limits the amount of times that buffers need to be
      sent the GPU before a draw call is issued. []

-> Need to figure out depth buffer issue [x]

3D Rendering:
-> Can Render Basic Objects in API calls []
   - Can draw cube []
   - Can draw a mesh [x]
-> Supports batch rendering - See in 2D Rendering Section []
-> Supports instanced rendering - See in 2D Rendering Section []

2D Rendering:
-> Can Render Basic Shapes in API calls []
   - Render Rectangles with textures [x]
   - Render Rectangles from sub textures [x]
-> Supports batch rendering []
   - Batch Rendering = an array of vertices that contain
     a set of vertices for different objects, if amount
     of vertex buffers reaches a certain cap or if the
     amount of texture slots fills up to the max, submit
     these vertices for drawing
-> Supports instanced rendering []
   - Instanced Rendering = a bunch of different objects that
     have just about the exact same properties can be sent to
     the GPU in a single draw call but they each have slightly
     different parameters, such as transform matrix, color, etc...

Shaders:
-> Write a system for loading and running Compute Shaders []

Lighting:
-> Add 3D Lighting system into the engine []
  	-> Point Light [x]
	-> Spotlight []
	-> Directional Light [x]
	-> Ambient Light []

-> Have materials react to the lighting in the game engine []
	-> Phong Shading [x]
		-> Specular Highlights [x]
		-> Lambert Shading []
     
----------------------------------------------------------------

Asset Management:

-> Implement GUIDs/UUIDs when saving assets [x]
      -> Only 64 bits for now, can be upgraded so that we can support 128 bit GUIDs [x]

Problems:
-> Separate in-engine asset management from editor asset management []
      -> Editor asset management handles all the assets within the editor,
         creates the meta files when assets are imported into the engine so that
         they can be loaded with metadata at a certain path.
            -> Handles different file extensions within the engine []
                 -> FileImporter that generates meta files based on the file extension
                      -> Textures (.png, .jpg, etc) -> Generates texture importer meta files.
                      -> Models (.fbx, .obj) -> Generates fbx import meta files.
                           -> Converts the fbx & obj files into a format that can be used by the engine []
                           -> Exports the converted files into binary files that can be read by the engine []
                           	-> FBXImporter, ObjImporter, etc...
                           -> Meta files can store the file path for the model and read from that []
            -> Handles creation of new files in editor []
                 -> Materials []
                      -> Generates a material & a material meta file containing all 
                         the variables that are assigned in the editor []
                           -> Material meta file could be empty for now except for a guid []
                           -> Material files contain:
                               -> Material constants layout & values assigned in editor []
                               -> The number of textures []
                               -> A list of referenced textures []
			            -> The textures are stored with their GUIDs 
                               -> The shader that the material is using []
                                    -> Generates the shader []
                 -> Scenes []
                      -> Generates a scene file & a scene meta file []
                          -> Scene meta file could be empty except for a guid []
                          -> Scene file gets generated that contain the list of all objects + components of objects [x]
                 -> Prefabs []
                      -> Generates a prefab file & a prefab meta file []
                          -> Prefab meta file could be empty except for a guid []
                 -> Meshes []
                      -> Generates a mesh file & a mesh meta file []
                          -> Mesh meta file could be empty except for a guid []
                          -> Mesh files contain:
                             -> Index Buffer (# indices, stride, & data in binary format)
                             -> Vertex Buffer (# vertices, stride, format, & data in binary format)
      -> In-Engine asset management handles when assets generated by the asset manager get loaded into memory.
            -> Assets should be reference counted based on how many times they are used within the scene. [x]
                    -> Assets are loaded and unloaded based on how many objects are using the scene [x]
            -> Can load files based on its GUID with its contents into memory []
                    -> A file path from a GUID []
			 -> Save to a JSON thats encoded in Binary that maps keys as FilePaths and values as GUIDs []
                         -> File gets loaded into memory within the dictionary []
                    -> Assets are loaded []
                    	-> Materials []
                    	-> Scenes []
                    	-> Prefabs []
                    	-> Meshes []
                    	-> Converted Model Files []
                        	-> Must find a place to store these files so that when game is built, we can load
                        	entities with different components based on those files.
                    	-> Converted Texture Files []
                        	-> Must find a place to store these files so that when game is built, we can easily
                        	access the path to these files.

Material System:
-> Dynamic Materials - Custom Parameters that 
can be changed with ease. [x]
   -> Must be provided with a layout for now, but meta files can be defined so that we 
      can load materials directly without a layout.
-> Track whether a texture has been assigned to a slot [x]

--------------------------------------------------------------
Physics/Collisions:

2D Collisions:
-> Box Collisions []
   -> OOBB []
-> Circle Collisions []
   -> Pretty easy

3D Collisions:
-> GJK - Use that for all types of collisions with meshes. []

Physics:
-> Basic Rigidbody Physics []

-------------------------------------------------------------
Serialization:

Type = JSON (at least for now)

-> Serialize Components to a format []
   -> Transform3D Component [x]
   -> Transform2D Component [x]
   -> Scene Camera [x]
   -> Mesh Component []
      -> Blocked by Guids
   -> Sprite Component []
      -> Blocked by Guids
-> Load Components from a format 
   -> Transform3D Component [x]
   -> Transform2D Component [x]
   -> Scene Camera [x]
   -> Mesh Component []
     -> Blocked by Guids
   -> Sprite Component [] 
     -> Blocked by Guids

-> Can Serialize Entities to a format [x]
   -> Components [x]
-> Can Load Entities from serialized format [x]
   -> Components [x]

-------------------------------------------------------------

ECS:

-> Added entt [x]
-> Implemented a wrapper around entt to use as the main ECS method [x]
-> Implemented a base entity class [x]

-> Added different types of built-in components that the engine will need []
   -> Transform 3D [x]
      -> Contains a reference to a parent matrix or transform.
   -> Transform 2D [x]
      -> Contains a reference to a parent matrix or transform.
   -> Scene Camera [x]
   -> Sprite Component (Might Change to Sprite Renderer) []
      -> Need to make texture accessible in Editor - Blocked by Project Window []
   -> Mesh Component (Might Change to Mesh Renderer) []
      -> Need to make mesh accessible in Editor - Blocked by Project Window []
   -> Entity Relationship Component (Come up with better name) [x]
      -> Contains a reference to parent entities [x]
      -> Contains a list of children entities [x]

Scene Events:
    -> Event that gets triggered when an entity gets destroyed [x]
    -> Event that gets triggered when an entity gets added [x]
    -> Event that gets triggered when a component gets added [x]
    -> Event that gets triggered when a component gets removed. [x]

-------------------------------------------------------------

Misc:
-> Refactor backends so that files get compiled based on macros 
	(ex: platform windows, only windows files should compile)
-> Multithreading []
    -> Implement a solid Job - Worker multithreading system [x]
    -> Must add mutexes to classes that are going to be edited in between threads. []
 	-> Graphics Components
		-> Vertex Buffers []
                -> Index Buffers []
                -> Buffer Layout []
            	-> Material []
                -> Texture []

Scripting:
-> Add native c++ scripting for now so that we can start testing/making games with this engine [x]
-> Add scripting using C# for the game engine []
    -> Research Mono, etc... 

-------------------------------------------------------------

Editor Hub:
-> Contains a menu list of all the projects that exist on machine []
-> Can double click on a project in that list and it will open it
if the project exists []
-> Can create new project via a dropdown []
-> Can delete a project from list of content view projects []

-------------------------------------------------------------

Editor:

-> Support Scripting in Engine []
   -> Should use C# []

-> Make Prettier and Give it Style []

-> Fixed issue with docking & window size [x]

-> Entity Inspector Window
   -> Add Components [x]
   -> Edit Components [x]
   -> Delete Components [x]

-> Scene Hierarchy
   -> Add Entities [x]
   -> Delete Entities [x]
   -> View children entities [x]

-> Project Window
   -> Displays all files in a given path [x]
   -> Can double click on sub folder and open the path []
   -> Can drag and drop files into project window []
   -> Can drag files in project window into scene []

-> Game
   -> Must have a way to play the game in the Editor
      -> Play Button []
      -> Stop Button []
   -> Must have a way to change aspect ratios in game view [x]

